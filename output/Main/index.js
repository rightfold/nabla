// Generated by psc version 0.9.1
"use strict";
var $foreign = require("./foreign");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Data_Map = require("../Data.Map");
var Data_Maybe = require("../Data.Maybe");
var Data_Tuple = require("../Data.Tuple");
var Nabla_Environment = require("../Nabla.Environment");
var Nabla_Parse = require("../Nabla.Parse");
var Nabla_Simplify = require("../Nabla.Simplify");
var Nabla_Term = require("../Nabla.Term");
var Prelude = require("../Prelude");
var Data_Function = require("../Data.Function");
var Data_Ord = require("../Data.Ord");
var Data_Foldable = require("../Data.Foldable");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Control_Bind = require("../Control.Bind");
var main = (function () {
    var γ = Data_Function.apply(Nabla_Environment.Γ)(Data_Map.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("Pi", Nabla_Term.Pi.value), new Data_Tuple.Tuple("E", Nabla_Term.E.value), new Data_Tuple.Tuple("Add", Nabla_Term.Add.value), new Data_Tuple.Tuple("Multiply", Nabla_Term.Mul.value), new Data_Tuple.Tuple("Raise", Nabla_Term.Pow.value), new Data_Tuple.Tuple("Log", Nabla_Term.Log.value), new Data_Tuple.Tuple("Differentiate", Nabla_Term.Derivative.value) ]));
    return $foreign.serve(function ($0) {
        return Data_Maybe.maybe("")(function ($1) {
            return Nabla_Term.showNabla(Nabla_Simplify.simplify($1));
        })(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Nabla_Parse.parse)(Data_Function.flip(Nabla_Environment.resolve)(γ))($0));
    });
})();
module.exports = {
    main: main, 
    serve: $foreign.serve
};
