// Generated by psc version 0.9.1
"use strict";
var Data_Array = require("../Data.Array");
var Data_Array_Partial = require("../Data.Array.Partial");
var Data_BigInt_1 = require("../Data.BigInt");
var Data_BigInt_1 = require("../Data.BigInt");
var Data_Foldable = require("../Data.Foldable");
var Data_List = require("../Data.List");
var Data_Map = require("../Data.Map");
var Data_Maybe = require("../Data.Maybe");
var Nabla_Derivative = require("../Nabla.Derivative");
var Nabla_Environment = require("../Nabla.Environment");
var Nabla_Term = require("../Nabla.Term");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra");
var Data_Eq = require("../Data.Eq");
var Data_Semiring = require("../Data.Semiring");
var Data_Boolean = require("../Data.Boolean");
var Data_Function = require("../Data.Function");
var Data_Ord = require("../Data.Ord");
var Data_Functor = require("../Data.Functor");
var Control_Bind = require("../Control.Bind");
var Data_Ring = require("../Data.Ring");
var simplifyZeroProduct = function (v) {
    if (v instanceof Nabla_Term.App && (v.value0 instanceof Nabla_Term.Mul && Data_Foldable.any(Data_Foldable.foldableArray)(Data_BooleanAlgebra.booleanAlgebraBoolean)(function (v1) {
        return Data_Eq.eq(Nabla_Term.eqTerm)(v1)(new Nabla_Term.Num(Data_Semiring.zero(Data_BigInt_1.semiringBigInt)));
    })(v.value1))) {
        return new Nabla_Term.Num(Data_Semiring.zero(Data_BigInt_1.semiringBigInt));
    };
    return v;
};
var simplifyPower = function (v) {
    if (v instanceof Nabla_Term.App && (v.value0 instanceof Nabla_Term.Pow && v.value1.length === 2)) {
        if (Data_Eq.eq(Nabla_Term.eqTerm)(v.value1[0])(new Nabla_Term.Num(Data_Semiring.zero(Data_BigInt_1.semiringBigInt)))) {
            return new Nabla_Term.Num(Data_Semiring.zero(Data_BigInt_1.semiringBigInt));
        };
        if (Data_Eq.eq(Nabla_Term.eqTerm)(v.value1[0])(new Nabla_Term.Num(Data_Semiring.one(Data_BigInt_1.semiringBigInt)))) {
            return new Nabla_Term.Num(Data_Semiring.one(Data_BigInt_1.semiringBigInt));
        };
        if (Data_Eq.eq(Nabla_Term.eqTerm)(v.value1[1])(new Nabla_Term.Num(Data_Semiring.zero(Data_BigInt_1.semiringBigInt)))) {
            return new Nabla_Term.Num(Data_Semiring.one(Data_BigInt_1.semiringBigInt));
        };
        if (Data_Eq.eq(Nabla_Term.eqTerm)(v.value1[1])(new Nabla_Term.Num(Data_Semiring.one(Data_BigInt_1.semiringBigInt)))) {
            return v.value1[0];
        };
        if (Data_Boolean.otherwise) {
            return new Nabla_Term.App(Nabla_Term.Pow.value, [ v.value1[0], v.value1[1] ]);
        };
    };
    return v;
};
var simplifyLambdaCall = function (v) {
    if (v instanceof Nabla_Term.App && (v.value0 instanceof Nabla_Term.Lam && Data_Array.length(v.value0.value0) === Data_Array.length(v.value1))) {
        var $34 = Nabla_Environment.resolve(v.value0.value1)(Data_Function.apply(Nabla_Environment.Î“)(Data_Map.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)(Data_Array.zip(v.value0.value0)(v.value1))));
        if ($34 instanceof Data_Maybe.Nothing) {
            return new Nabla_Term.App(new Nabla_Term.Lam(v.value0.value0, v.value0.value1), v.value1);
        };
        if ($34 instanceof Data_Maybe.Just) {
            return $34.value0;
        };
        throw new Error("Failed pattern match at Nabla.Simplify line 113, column 7 - line 115, column 21: " + [ $34.constructor.name ]);
    };
    return v;
};
var simplifyDerivative = function (v) {
    if (v instanceof Nabla_Term.App && (v.value0 instanceof Nabla_Term.Derivative && (v.value1.length === 2 && v.value1[1] instanceof Nabla_Term.Var))) {
        var $41 = Nabla_Derivative.derivative((v.value1[1]).value0)(v.value1[0]);
        if ($41 instanceof Data_Maybe.Just) {
            return $41.value0;
        };
        if ($41 instanceof Data_Maybe.Nothing) {
            return new Nabla_Term.App(Nabla_Term.Derivative.value, [ v.value1[0], new Nabla_Term.Var((v.value1[1]).value0) ]);
        };
        throw new Error("Failed pattern match at Nabla.Simplify line 96, column 3 - line 98, column 41: " + [ $41.constructor.name ]);
    };
    return v;
};
var identity = function (v) {
    if (v instanceof Nabla_Term.Add) {
        return new Data_Maybe.Just(new Nabla_Term.Num(Data_Semiring.zero(Data_BigInt_1.semiringBigInt)));
    };
    if (v instanceof Nabla_Term.Mul) {
        return new Data_Maybe.Just(new Nabla_Term.Num(Data_Semiring.one(Data_BigInt_1.semiringBigInt)));
    };
    return Data_Maybe.Nothing.value;
};
var simplifyIdentity = function (v) {
    if (v instanceof Nabla_Term.App && v.value1.length === 0) {
        var $50 = identity(v.value0);
        if ($50 instanceof Data_Maybe.Nothing) {
            return new Nabla_Term.App(v.value0, [  ]);
        };
        if ($50 instanceof Data_Maybe.Just) {
            return $50.value0;
        };
        throw new Error("Failed pattern match at Nabla.Simplify line 60, column 3 - line 62, column 17: " + [ $50.constructor.name ]);
    };
    if (v instanceof Nabla_Term.App) {
        var $54 = identity(v.value0);
        if ($54 instanceof Data_Maybe.Nothing) {
            return new Nabla_Term.App(v.value0, v.value1);
        };
        if ($54 instanceof Data_Maybe.Just) {
            return new Nabla_Term.App(v.value0, Data_Array.filter(function (v1) {
                return Data_Eq.notEq(Nabla_Term.eqTerm)(v1)($54.value0);
            })(v.value1));
        };
        throw new Error("Failed pattern match at Nabla.Simplify line 64, column 3 - line 66, column 48: " + [ $54.constructor.name ]);
    };
    return v;
};
var group = function (v) {
    if (v instanceof Nabla_Term.Add) {
        return new Data_Maybe.Just(function (n) {
            return function (t) {
                return new Nabla_Term.App(Nabla_Term.Mul.value, [ new Nabla_Term.Num(n), t ]);
            };
        });
    };
    if (v instanceof Nabla_Term.Mul) {
        return new Data_Maybe.Just(function (n) {
            return function (t) {
                return new Nabla_Term.App(Nabla_Term.Pow.value, [ t, new Nabla_Term.Num(n) ]);
            };
        });
    };
    return Data_Maybe.Nothing.value;
};
var simplifyGrouping = function (v) {
    if (v instanceof Nabla_Term.App) {
        var $60 = group(v.value0);
        if ($60 instanceof Data_Maybe.Nothing) {
            return new Nabla_Term.App(v.value0, v.value1);
        };
        if ($60 instanceof Data_Maybe.Just) {
            var perGroup = function (v1) {
                if (v1.length === 1) {
                    return v1[0];
                };
                return $60.value0(Data_Function.apply(Data_BigInt_1.fromInt)(Data_Array.length(v1)))(Data_Function.apply(Partial_Unsafe.unsafePartial)(function (dictPartial) {
                    return Data_Array_Partial.head(dictPartial)(v1);
                }));
            };
            return Data_Function.apply(Nabla_Term.App.create(v.value0))(Data_Functor.map(Data_Functor.functorArray)(perGroup)(Data_Array["group'"](Nabla_Term.ordTerm)(v.value1)));
        };
        throw new Error("Failed pattern match at Nabla.Simplify line 50, column 3 - line 55, column 58: " + [ $60.constructor.name ]);
    };
    return v;
};
var foldConstants = function (v) {
    if (v instanceof Nabla_Term.Add) {
        return new Data_Maybe.Just({
            op: Data_Semiring.add(Data_BigInt_1.semiringBigInt), 
            id: Data_Semiring.zero(Data_BigInt_1.semiringBigInt)
        });
    };
    if (v instanceof Nabla_Term.Mul) {
        return new Data_Maybe.Just({
            op: Data_Semiring.mul(Data_BigInt_1.semiringBigInt), 
            id: Data_Semiring.one(Data_BigInt_1.semiringBigInt)
        });
    };
    return Data_Maybe.Nothing.value;
};
var simplifyConstants = function (v) {
    if (v instanceof Nabla_Term.App) {
        var partition = (function () {
            var go = function (v1) {
                return function (v2) {
                    if (v2 instanceof Nabla_Term.Num) {
                        return {
                            consts: new Data_List.Cons(v2.value0, v1.consts), 
                            rest: v1.rest
                        };
                    };
                    return {
                        consts: v1.consts, 
                        rest: new Data_List.Cons(v2, v1.rest)
                    };
                };
            };
            return Data_Foldable.foldl(Data_Foldable.foldableArray)(go)({
                consts: Data_List.Nil.value, 
                rest: Data_List.Nil.value
            });
        })();
        var $75 = foldConstants(v.value0);
        if ($75 instanceof Data_Maybe.Nothing) {
            return new Nabla_Term.App(v.value0, v.value1);
        };
        if ($75 instanceof Data_Maybe.Just) {
            var $76 = partition(v.value1);
            if ($76.consts instanceof Data_List.Nil) {
                return new Nabla_Term.App(v.value0, v.value1);
            };
            return new Nabla_Term.App(v.value0, Data_Function.apply(Data_Array.fromFoldable(Data_List.foldableList))(new Data_List.Cons(new Nabla_Term.Num(Data_Foldable.foldl(Data_List.foldableList)($75.value0.op)($75.value0.id)($76.consts)), $76.rest)));
        };
        throw new Error("Failed pattern match at Nabla.Simplify line 71, column 3 - line 76, column 92: " + [ $75.constructor.name ]);
    };
    return v;
};
var equalsUnaryApp = function (v) {
    if (v instanceof Nabla_Term.Add) {
        return true;
    };
    if (v instanceof Nabla_Term.Mul) {
        return true;
    };
    return false;
};
var simplifyUnaryApp = function (v) {
    if (v instanceof Nabla_Term.App && (v.value1.length === 1 && equalsUnaryApp(v.value0))) {
        return v.value1[0];
    };
    return v;
};
var commutative = function (v) {
    if (v instanceof Nabla_Term.Add) {
        return true;
    };
    if (v instanceof Nabla_Term.Mul) {
        return true;
    };
    return false;
};
var simplifyCommutativity = function (v) {
    if (v instanceof Nabla_Term.App && commutative(v.value0)) {
        return new Nabla_Term.App(v.value0, Data_Array.sort(Nabla_Term.ordTerm)(v.value1));
    };
    return v;
};
var associative = function (v) {
    if (v instanceof Nabla_Term.Add) {
        return true;
    };
    if (v instanceof Nabla_Term.Mul) {
        return true;
    };
    return false;
};
var simplifyAssociativity = function (v) {
    if (v instanceof Nabla_Term.App && associative(v.value0)) {
        var flatten = function (v1) {
            if (v1 instanceof Nabla_Term.App && Data_Eq.eq(Nabla_Term.eqTerm)(v1.value0)(v.value0)) {
                return Control_Bind.bind(Control_Bind.bindArray)(v1.value1)(flatten);
            };
            return [ v1 ];
        };
        return new Nabla_Term.App(v.value0, Control_Bind.bind(Control_Bind.bindArray)(v.value1)(flatten));
    };
    return v;
};
var simplifyComponents = function (v) {
    if (v instanceof Nabla_Term.App) {
        return new Nabla_Term.App(simplify$prime(v.value0), Data_Functor.map(Data_Functor.functorArray)(simplify$prime)(v.value1));
    };
    if (v instanceof Nabla_Term.Lam) {
        return new Nabla_Term.Lam(v.value0, simplify$prime(v.value1));
    };
    return v;
};
var simplify$prime = function (t) {
    return Data_Function.applyFlipped(Data_Function.applyFlipped(Data_Function.applyFlipped(Data_Function.applyFlipped(Data_Function.applyFlipped(Data_Function.applyFlipped(Data_Function.applyFlipped(Data_Function.applyFlipped(Data_Function.applyFlipped(Data_Function.applyFlipped(Data_Function.applyFlipped(t)(simplifyAssociativity))(simplifyGrouping))(simplifyIdentity))(simplifyConstants))(simplifyCommutativity))(simplifyUnaryApp))(simplifyZeroProduct))(simplifyDerivative))(simplifyPower))(simplifyLambdaCall))(simplifyComponents);
};
var simplify = (function () {
    var go = function (__copy_v) {
        return function (__copy_x) {
            var v = __copy_v;
            var x = __copy_x;
            tco: while (true) {
                if (v === 0) {
                    return x;
                };
                var simplified = simplify$prime(x);
                var $108 = Data_Eq.eq(Nabla_Term.eqTerm)(simplified)(x);
                if ($108) {
                    return simplified;
                };
                if (!$108) {
                    var __tco_v = v - 1;
                    v = __tco_v;
                    x = simplified;
                    continue tco;
                };
                throw new Error("Failed pattern match at Nabla.Simplify line 23, column 22 - line 25, column 50: " + [ $108.constructor.name ]);
            };
        };
    };
    return go(128);
})();
module.exports = {
    simplify: simplify
};
